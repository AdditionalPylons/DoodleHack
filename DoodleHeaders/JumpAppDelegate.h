/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "DoodleJump-Structs.h"
#import "CloudDocumentDelegate.h"
#import "FBSessionDelegate.h"
#import "FBRequestDelegate.h"
#import "FBDialogDelegate.h"
#import "OFRequestDelegate.h"
#import "GKMatchmakerViewControllerDelegate.h"
#import "GKMatchDelegate.h"
#import "MFMailComposeViewControllerDelegate.h"
#import "UIWebViewDelegate.h"
#import "UIApplicationDelegate.h"
#import "UIAlertViewDelegate.h"
#import "UITextFieldDelegate.h"
#import "UIAccelerometerDelegate.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class UIImageView, NSArray, UIWindow, EAGLViewController, ImagePopUpView, CloudDocument, DocumentSelector, BlizzardParticles, NSTimer, NSMutableArray, NSMutableData, NSURLConnection, UIView, UIButton, UITextField, UIWebView, NSString, NSScanner, NSMutableDictionary, NSObject, PlatformObject, BonusObject, MeteorObject, HoleObject, UfoObject, WWHSListView, SubmitWWHSView, OptionsView, GKInvite, TwitterView, GKMatch, SnowParticles, NSData, ThemeScrollView, UIAlertView, NSMutableSet, UnderwaterLines, NSCountedSet, BubbleParticles, NSError, NSURL, NSMetadataQuery, CALayer, Texture2D, EAGLView, OALSound, RainParticles, HelperViewController, GameConfiguration, Facebook, FBLoginButton;

@interface JumpAppDelegate : NSObject <UIApplicationDelegate, UIAccelerometerDelegate, UITextFieldDelegate, UIAlertViewDelegate, FBSessionDelegate, FBRequestDelegate, FBDialogDelegate, UIWebViewDelegate, MFMailComposeViewControllerDelegate, GKMatchmakerViewControllerDelegate, GKMatchDelegate, CloudDocumentDelegate, OFRequestDelegate> {
	UIWindow* window_;
	EAGLView* glView;
	EAGLViewController* glViewController;
	CGContextRef nameContext;
	void* nameContextData;
	UIImageView* loadingImageView;
	Facebook* facebook;
	int showFacebookLogInName;
	FBLoginButton* facebookOfficialButton;
	NSArray* facebookFriendsArray;
	int needsToLoadFriendScoresAfterLogin;
	int needsToSubmitFeedAfterLogin;
	NSString* playerFBName;
	int facebookFriendsLoaded;
	int getFBUserNameRequestActive;
	NSString* fbuuidString;
	ALCcontext_structRef audioContext;
	ALCdevice_structRef audioDevice;
	OALSound* ufoHitSound;
	OALSound* springHitSound;
	OALSound* jumpSound[2];
	OALSound* platformBreakSound;
	OALSound* shootingSound[2];
	OALSound* ufoSound;
	OALSound* platformDisappearSound;
	OALSound* holeSound;
	OALSound* fallingSound;
	OALSound* ufoExplosionSound;
	OALSound* monsterHitSound;
	OALSound* monsterExplosionSound;
	OALSound* monsterSound;
	OALSound* jetPackSound;
	OALSound* jumpOnMonsterSound;
	OALSound* propellerSound;
	OALSound* explodingPlatformSound[2];
	OALSound* trampolineSound;
	OALSound* rainSound;
	OALSound* thunderSound;
	OALSound* rocketSound;
	OALSound* matchSound;
	OALSound* chillCloudSound;
	OALSound* windSound;
	OALSound* collectSound;
	Texture2D* textureGameTiles;
	Texture2D* textureStartEndTiles;
	Texture2D* textureProjectileTiles;
	Texture2D* textureStartBottomBugTiles;
	Texture2D* textureMatchNameTiles;
	Texture2D* textureDefaultBackground;
	Texture2D* textureGameBackground;
	Texture2D* texturePlayer[4][4];
	Texture2D* texturePlayerFrozen[3];
	Texture2D* texturePlayerNose;
	Texture2D* textureScoreBackground;
	Texture2D* textureGameOverPlayerName;
	Texture2D* textureGameTitle;
	Texture2D* textureStarsAnimation[3];
	Texture2D* texturePowerUp[4];
	Texture2D* textureCalibrationInfo;
	Texture2D* textureCalibrationTitle;
	Texture2D* textureStartHole;
	Texture2D* textureDoodlerOnly[2];
	Texture2D* textureLight;
	Texture2D* textureMoon;
	Texture2D* textureLand;
	Texture2D* textureSpringShoes[2];
	Texture2D* textureSnowBottom;
	Texture2D* textureThemes[2];
	Texture2D* textureSwipeAlert;
	Texture2D* textureSideScroller;
	Texture2D* textureUnderwaterLight;
	Texture2D* textureHalloweenOverlay;
	Texture2D* textureAchievementNameTiles;
	Texture2D* textureHopBottom;
	Texture2D* texturePaperTear;
	NSTimer* mainGameLoopTimer;
	NSTimer* startScreenLoopTimer;
	NSTimer* calibrationScreenLoopTimer;
	NSTimer* restartGameAfterPauseTimer;
	NSTimer* askForRatingAfterResumeTimer;
	NSTimer* swapBufferTimer;
	int accelerometerStarted;
	int accelerometerSpeed;
	double accelX;
	float calibrationValueX;
	float calibrateX;
	float deviceOrientation;
	float playerX;
	float playerY;
	float playerNoseRotation;
	float playerScaleX;
	float playerScaleY;
	int facingDirection;
	float mainScreenUpOffset;
	float mainScreenDownOffset;
	int playerIsFalling;
	float jumpOffset;
	CGRect playerBoundingBox;
	CGRect playerHeadBoundingBox;
	int playerCanMove;
	int playerDidHitHole;
	int playerDidHitUfo;
	int playerDidFall;
	int playerDidHitMonster;
	int playerDidFreeze;
	int screenShouldMoveDown;
	float screenMovingDownOffset;
	float playerFallingOffset;
	int playerAction;
	int playerType;
	int shootingType;
	int playerHasPowerUp;
	int playerHasShield;
	int slowDownPowerUp;
	int safeArea;
	int usedJetPacks;
	int nextJetPackHeight;
	int nextPropellerHeight;
	int propellerEnabled;
	int shieldEnabled;
	int nextBckTrackObjectHeight;
	int backgroundTrackArrayIndex;
	int playerIsRotating;
	float playerRotationAngle;
	int playerRotationTime;
	float playerRotationStep;
	int playerRotationFacing;
	int trampolineTime;
	int lastTrampolineTime;
	BonusObject* activeTrampolineObject;
	float trampolineSlowDown;
	int timeFromLastShot;
	int movingDirection;
	float lastDirectionChangeX;
	float backgroundOffset;
	float sideScrollerOffset;
	int shouldCheckForCollisions;
	int gameState;
	int gameModeOption;
	int startScreenInView;
	int calibrationScreenInView;
	int framesToTargetPosition;
	float xStepToTargetPoisition;
	float yStepToTargetPoisition;
	UfoObject* playerHitUfoObject;
	HoleObject* playerHitHoleObject;
	int currentStarsTexture;
	int starsAnimationTimer;
	int ufosOnScreen;
	int monstersOnScreen;
	NSMutableArray* visiblePlatformsArray;
	NSMutableArray* bonusObjectsArray;
	NSMutableArray* projectileObjectsArray;
	NSMutableArray* holeObjectsArray;
	NSMutableArray* ufoObjectsArray;
	NSMutableArray* monsterObjectsArray;
	NSMutableArray* backgroundObjectsArray;
	NSMutableArray* powerUpObjectsArray;
	NSMutableArray* secondaryBackgroundObjectsArray;
	NSMutableArray* interactiveObjectsArray;
	NSMutableArray* objectsToRemoveArray;
	NSMutableArray* easyRandomScenes;
	NSMutableArray* hardRandomScenes;
	int easyRandomSceneIndex;
	int hardRandomSceneIndex;
	int currentScene;
	int currentSceneObjectIndex;
	float firstSceneObjectOffset;
	int isGeneratingScene;
	float springVal;
	float score;
	int highScore;
	int highScoreSent;
	NSString* highScoreHash;
	SubmitWWHSView* submitWWHSView;
	WWHSListView* wwhsListView;
	OptionsView* optionsView;
	TwitterView* twitterView;
	NSMutableData* receivedData;
	NSURLConnection* getHighScoresConnection;
	NSURLConnection* getFacebookFriendScoresConnection;
	NSURLConnection* submitHighScoreConnection;
	NSURLConnection* submitScoreAndHighScoreConnection;
	NSURLConnection* submitScoreConnection;
	int connectionIsGetingHScores;
	int sendLastScore;
	int highScoreSendingCancelled;
	UIView* playAgainButtonView;
	UIButton* playAgainButton;
	UIButton* playButton;
	UIView* menuButtonView;
	UIView* facebookButtonView;
	UIView* twitterButtonView;
	UIButton* twitterButton;
	UIView* transitionViewBlack;
	UIView* transitionViewHelp;
	UIView* playButtonView;
	UIView* scoresButtonView;
	UIView* optionsButtonView;
	UIView* challengeButtonView;
	UIView* setButtonView;
	UIView* doneButtonView;
	UIView* pauseCoverView;
	UIView* resumeButtonView;
	ThemeScrollView* themeScrollView;
	UITextField* nameTextField;
	NSString* playerName;
	NSString* previousPlayerName;
	int shouldEnterPlayerName;
	int playerIsEnteringName;
	int pauseEnabled;
	int pauseCounter;
	int backgroundPauseCounter;
	NSMutableArray* highScoreTexturesArray;
	NSMutableArray* highScoreNamesArray;
	NSMutableArray* highScoreHeightsArray;
	NSMutableArray* highScoreTypesArray;
	NSMutableArray* localHighScoreTexturesArray;
	NSMutableArray* localRecentScoreTexturesArray;
	NSMutableArray* local10HighScoreNamesArray;
	NSMutableArray* local10HighScoreHeightsArray;
	NSMutableArray* local10HighScoreFacebookIDSArray;
	NSMutableArray* local10HighScoreDatesArray;
	NSMutableArray* local50RecentScoreNamesArray;
	NSMutableArray* local50RecentScoreHeightsArray;
	NSMutableArray* localTop10RecentScoreNamesArray;
	NSMutableArray* localTop10RecentScoreHeightsArray;
	int firstLocalScoreIndex;
	int firstRecentScoreIndex;
	int lastInsertedLocalScoreIndex;
	int newLocalHighScoreInserted;
	int highScoreTexturesGenerated;
	int highScoreResultsOK;
	int highScoreResultsCount;
	int loadCompleteHSList;
	int scoreMarkersOption;
	int scoreSubmissionsOption;
	int soundsOption;
	int shootingOption;
	int calibrationOption;
	int openFeintOption;
	int newsStatus;
	int latestNewsId;
	int lastDetectedNewsId;
	int firstTimeGameLaunch;
	int numberOfTimesPlayed;
	int newsIsHiding;
	BOOL autoDisplayNewsEnabled;
	UIImageView* newsBckgImageView;
	UIImageView* newsTitleImageView;
	UIImageView* loadingNewsImageView;
	UIWebView* newsWebView;
	UIButton* newsCloseButton;
	UIButton* newsOpenButton;
	NSMutableArray* displayedNewsIdsArray;
	int isPreloadingNews;
	int userCancelledNewsId;
	NSString* newsViewAction;
	int ogl2Detected;
	int scheduleTimer;
	int waitForAlertResponse;
	int shouldFinishDrawingFast;
	int systemDidPause;
	BOOL gameIsScrolling;
	int activeGameTextureId;
	VertexTexCoord vertexData[1200];
	unsigned short indices[1800];
	int elementsToDraw;
	VertexTexCoord localScoresVertexData[80];
	VertexTexCoord backgroundVertexData[4];
	VertexTexCoord jungleScrollerVertexData[24];
	VertexTexCoord halloweenScrollerVertexData[8];
	VertexTexCoord iceScrollerVertexData[16];
	PlatformObject* touchedPlatform;
	int shouldGenerateSceneLater;
	int showPlatformTouchHelp;
	int shouldGenerateShield;
	UIButton* classicPopUpButton;
	int classicPopUpShown;
	int gameEntryPoint;
	NSScanner* resultsScanner;
	int checkNewsIdOnly;
	NSString* serverResponseString;
	NSString* langString;
	float noSceneUntilOffset;
	int lightToCenterTime;
	float lightPosX;
	float lightPosY;
	float lightOffsetX;
	float lightOffsetY;
	NSMutableDictionary* gameStatsDict;
	int monstersShot;
	int monstersJumpedOn;
	int framesDrawn;
	int numberOfJumps;
	int ufosShot;
	int ufosJumpedOn;
	int jetPackFlights;
	int propellerHatFlights;
	int rocketFlights;
	int eggsCollected;
	int playerHasSpringShoes;
	int skipCheckingPlatformShoesHit;
	int springShoesFalling;
	int springShoesTime;
	int springShoesJumpPhase;
	int springShoesTextureId;
	int springShoesAnimationId;
	PlatformObject* springShoesHitPlatform;
	int springShoesFrameOffset;
	CGPoint springShoesPosition;
	float springShoesRotation;
	float springShoesRotationChange;
	float springShoesVSpeed;
	BOOL springShoesTextureFlipH;
	BlizzardParticles* blizzardParticles;
	SnowParticles* snowParticles;
	RainParticles* rainParticles;
	float screenMoveOffset;
	MeteorObject* meteorObject;
	int themeMode;
	int newHSTextureAddPhase;
	int gameDidFinishLoading;
	int shouldAnimateSwipeAlert;
	float swipeAlertOpacity;
	int animIndex;
	int ticksToNextKeyPoint;
	float animSpeedChange;
	float swipeAlertPosX;
	float swipeAlertSpeed;
	int rainStartCounter;
	float rainVolume;
	int rainVolumeAdjustCounter;
	int shouldDrawRocketBelowPlayer;
	int shouldShakeRocket;
	int shouldRemoveObjects;
	NSObject* objectToRemove;
	int serverResponseParsingPhase;
	int highScoresChecked;
	int shouldShowWWHSViewLater;
	/*function-pointer*/ void* platformObjectTickCALL;
	SEL tickSEL;
	/*function-pointer*/ void* platformObjectMoveWithOffsetYCALL;
	SEL moveWithOffsetYSEL;
	/*function-pointer*/ void* platformObjectObjPositionCALL;
	SEL objPositionSEL;
	/*function-pointer*/ void* platformObjectObjTextureCALL;
	SEL objTextureSEL;
	/*function-pointer*/ void* platformObjectFadingTypeCALL;
	SEL fadingTypeSEL;
	int shouldShowWhatsNew;
	ImagePopUpView* whatsNewPopUpView;
	int isPausedOALContext;
	int isPausedOALSound;
	int matchNameState;
	int matchId;
	int matchVolumeState;
	float matchVolume;
	int sceneChance;
	float latestVersion;
	int isNewHighScore;
	BOOL isCoralTrackFlipped;
	GameConfiguration* config_;
	UnderwaterLines* underwaterLines;
	BubbleParticles* bubbleParticles;
	int skipStartingStartScreenLoopTimer;
	int shouldAskForRatingAfterResume;
	FishSprite* fishSprites;
	int freeFishSpriteIds[2];
	int topFishSpriteIndex;
	int continueLoadingPhase;
	unsigned nameContextWidth;
	unsigned nameContextHeight;
	CGSize nameContextContentSize;
	CGRect nameContextContentRect;
	int nameContextContentFontSize;
	int runMainGameLoopOnActivation;
	BlinkingEyesSprite* blinkingEyesSprites;
	VertexTexCoord halloweenOverlayVertexData[28];
	int isAuthenticatingPlayer;
	float platformTilesMapCopy[16][6];
	BOOL showGCLoginError;
	NSString* achievementsPlayerId;
	NSMutableDictionary* sentAchievementsDict;
	NSMutableDictionary* unsentAchievementsDict;
	NSMutableDictionary* progressAchievementsDict;
	NSMutableArray* unsentHighScoresArray;
	NSMutableArray* leaderboardEggsArray;
	int currentAchievementsRequestId;
	NSArray* achievementDescArray;
	int achievementDisplayState;
	int achievementDisplayBuffer[5];
	int achievementNamePosY;
	NSTimer* drawAnimationsOnGameOverScreenTimer;
	int achSerialSpringer;
	int achSuperSerialSpringer;
	int achMonsterBouncer;
	int achSuperMonsterBouncer;
	int achConflictAvoider;
	int achSuperConflictAvoider;
	int achSharpShooter;
	int achSuperSharpShooter;
	int achTwitterConnector;
	int achFacebookConnector;
	int achJetPackFlyer;
	int achOldFashionedJumper;
	int achPropellerhead;
	int achSpringShoesJumper;
	int achUfoAbductionSurvivor;
	int achRaceChamp;
	int raceChampCounter;
	int achRaceHero;
	int raceHeroCounter;
	int achRaceLegend;
	int raceLegendCounter;
	int achEnduranceJumper;
	int achFocusedEnduranceJumper;
	int achDoodleJumpExplorer;
	int achEpicFail;
	int achEpicFailFTW;
	int epicFailFTWCounter;
	int achMonsterChopper;
	int achUfoBouncer;
	int achHundredThousand;
	int achPocketGod;
	int achEggHunter;
	int achEggHunterExtra;
	int eggHunterExtraCounter;
	int lastSpringJumpNumber;
	int consecutiveSpringJumps;
	int monstersAvoided;
	int sharpShots;
	int missedJetPacks;
	int enduranceConsecutiveJumps;
	int lastEnduranceHitPlatformObjId;
	int brokenPlatformsHitCounter;
	int addEpicFailFTWKeyToReportSetOnGameDidFinish;
	int addEggHunterExtraKeyToReportSetOnGameDidFinish;
	int playerDidJump;
	int jetPackOffsetX;
	int jetPackOffsetY;
	int propellerOffsetX;
	int propellerOffsetY;
	int noseOffsetY;
	CGRect hopBoundingBoxLeft;
	CGRect hopBoundingBoxRight;
	CGRect hopBoundingBoxCenter;
	GKInvite* latestGKInvite;
	NSArray* latestPlayersToInvite;
	int matchmakerInView;
	int isMultiplayerHost;
	GKMatch* multiplayerMatch;
	int matchConnected;
	int multiplayerGameState;
	double syncPacketSendTime;
	float latency;
	NSTimer* syncPacketTimeoutTimer;
	NSTimer* seedPacketTimeoutTimer;
	NSTimer* waitingForOpponentTimer;
	unsigned currentRandomSeed;
	int isMultiplayerGame;
	float mainScreenUpOffsetCopy;
	int topObjectExactUpOffset;
	NSData* gamePacketData[6];
	NSMutableArray* eventPacketArray;
	int opponentGameTime;
	NSMutableArray* platformsToHideArray;
	NSMutableArray* bonusesToHideArray;
	NSMutableArray* monstersToHideArray;
	NSMutableArray* monstersToHitArray;
	NSMutableArray* opponentProjectilesArray;
	NSMutableArray* ufosToHideArray;
	float opponentNoseRotation;
	int sendJumpSound;
	float opponentX;
	float opponentY;
	float opponentLocalY;
	int opponentAction;
	int opponentFacingDirection;
	int opponentDidHitHole;
	int opponentDidHitUfo;
	int opponentDidFall;
	int opponentDidHitMonster;
	int lastSceneMonsterObjId;
	int lastSceneUfoObjId;
	double multiplayerGameStartTime;
	float opponentScaleX;
	float opponentScaleY;
	int opponentScaleCounter;
	int opponentStarsAnimationTimer;
	int opponentCurrentStarsTexture;
	float fallingY;
	float fallingJumpOffset;
	float fallingDifference;
	float opponentScreenUpOffset;
	int skipDrawingOpponent;
	int showMatchmakerOnStartup;
	int showMatchmakerAfterAuth;
	int cancelGameRestart;
	int multiplayerSystemDidPause;
	double gamePacketLastTime;
	int gameModeOptionOriginal;
	int matchmakerWillDisappear;
	int returnToMenuOnResume;
	int isPlayAgainBlinking;
	NSTimer* playAgainButtonTimer;
	int resolveInvitationOnActivation;
	int showMatchmakerOnActivation;
	int gameOverInView;
	UIAlertView* actionAlertView1;
	UIAlertView* actionAlertView2;
	UIAlertView* actionAlertView3;
	UIAlertView* actionAlertView4;
	UIAlertView* actionAlertView5;
	UIAlertView* actionAlertView6;
	UIAlertView* actionAlertView7;
	int connectionIsGetingFriendScores;
	int dismissMatchmakerOnResume;
	int finishLineVisible;
	int skipMovingScreenUp;
	int beginWinAnimationCounter;
	int playerDidCrossFinishLine;
	int opponentDidCrossFinishLine;
	int mainScreenDownOffsetFinal;
	int packetCounterBuffer[120];
	int packetCounterIndex;
	int packetCounter;
	int packetCounterReady;
	int skipCheckingPacketCounter;
	NSMutableArray* multiplayerRandomScenes;
	int multiplayerRandomSceneIndex;
	int raceResult;
	Texture2D* textureOpponent[3][4];
	Texture2D* textureOpponentNose;
	int opponentType;
	int fastFramesCounter;
	int raceResultValidated;
	double multiplayerGameEndTime;
	float multiplayerGameTotalTime;
	float playerOffsetY;
	int startSide;
	int opponentWaitCounter;
	int preparingMultiplayerPhase;
	double startPreparingTime;
	int additionalPrepareFrames;
	int gc41Detected;
	UIButton* challengeButton;
	int sendMailControllerIsAnimating;
	int sendMailControllerInView;
	unsigned backgroundTask;
	NSTimer* endBackgroundTaskTimer;
	NSTimer* waitForRaceValidationTimer;
	int playerConnectedViaWiFi;
	int opponentConnectedViaWiFi;
	int showWiFiAlertOnDisconnect;
	NSTimer* connectPacketTimeoutTimer;
	GKMatch* matchToDisconnect;
	int opponentScore;
	Texture2D* textureMultiplayerTiles;
	Texture2D* textureMultiplayerRaceOver;
	Texture2D* textureMultiplayerBackgroundTiles;
	int multiplayerPrepareCounter;
	int playerMultiplayerScore;
	int opponentMultiplayerScore;
	int playerMultiplayerScoreForDisplay;
	int opponentMultiplayerScoreForDisplay;
	NSString* multiplayerPlayerName;
	NSString* multiplayerOpponentName;
	Texture2D* textureMultiplayerPlayerName;
	Texture2D* textureMultiplayerOpponentName;
	Texture2D* textureMultiplayerPlayerNameGrayColor;
	Texture2D* textureMultiplayerOpponentNameGrayColor;
	int scorePositionsCalculated;
	OALSound* finishSound;
	OALSound* startSound;
	int shouldShowCancelAlert;
	int consecutiveSprings;
	int springChance;
	double mainGameLoopTimerStartTime;
	int mainGameLoopTimerStartFramesDrawn;
	int slowTimer;
	float opponentDiffX;
	float opponentDiffY;
	int packetDidArrive;
	int lostPacketCounter;
	int shouldPredictPosition;
	int achievementsDidSynchronize;
	NSMutableSet* achievementKeysToReportSet;
	int inBackground;
	int startOffsetSyncCounter;
	int incomingDisconnectReason;
	int disconnectReasonDidArrive;
	int totalMultiplayerWins;
	int gameStatsUpdated;
	int shouldSyncServerAchievementsOnGameDidFinish;
	int shouldProcessServerAchievementsOnGameDidFinish;
	NSArray* achievementsArrayToProcess;
	int achievementsSyncedAtLeastOnce;
	int multiplayerDidDisconnectInGame;
	int shouldShowRaceOver;
	NSCountedSet* playedThemesSet;
	BOOL shouldExecuteMultiplayerMode;
	int facebookCallbackDidStartApp;
	int activeFromBackground;
	int isAuthorizingWithFacebook;
	int readyForProcessingGC;
	int shouldProcessGCAuthLater;
	NSError* processGCAuthLaterError;
	int shouldRestartSoundEngine;
	NSArray* testScene;
	HelperViewController* helperViewController;
	int twitterClassAvailable;
	int iOSTwitterInView;
	int iOSTwitterRecentlyCancelled;
	NSString* cloudDocumentFileName;
	NSURL* cloudDocumentUbiquitousURL;
	NSURL* cloudDocumentLocalURL;
	NSMetadataQuery* cloudDocumentQueryPreviousInstall;
	NSMetadataQuery* cloudDocumentQueryCurrentInstall;
	NSMetadataQuery* cloudDocumentQueryAllDevices;
	CloudDocument* cloudDocument;
	DocumentSelector* documentSelector;
	NSMutableArray* openingDocumentsFromQueryArray;
	NSMutableArray* openedDocumentsFromQueryArray;
	int installId;
	int searchForPreviousInstallCloudDocument;
	CloudDocument* newCloudDocument;
	float accelMultiplier;
	int horizontalSlowDownCounter;
	CALayer* loadingImageLayer;
	NSString* doodleJumpUID;
	int shouldLoadAndSyncLeaderboardEggs;
	int ofEggsLeaderboardScore;
}
@property(retain, nonatomic) UIWindow* window_;
@property(copy) NSString* achievementsPlayerId;
@property(retain) NSMutableDictionary* sentAchievementsDict;
@property(retain) NSMutableDictionary* unsentAchievementsDict;
@property(retain) NSMutableDictionary* progressAchievementsDict;
@property(retain) NSCountedSet* playedThemesSet;
@property(retain) NSArray* achievementDescArray;
@property(copy) NSString* multiplayerPlayerName;
@property(copy) NSString* multiplayerOpponentName;
@property(retain) NSMutableSet* achievementKeysToReportSet;
@property(copy, nonatomic) NSString* fbuuidString;
@property(retain) NSMutableArray* unsentHighScoresArray;
@property(retain) NSMutableArray* leaderboardEggsArray;
@property(copy, nonatomic) NSString* doodleJumpUID;
@property(retain, nonatomic) UIWindow* window;
-(void)applicationDidEnterBackground:(id)application;
-(void)endBackgroundTask;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(void)checkAndRepairSoundIfNeeded;
-(void)pauseOALContext;
-(void)resumeOALContext;
-(id)mainView;
-(void)configure:(id)configure;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(void)deviceOrientationDidChange:(id)deviceOrientation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(void)loadPhase1;
-(void)loadPhase4;
-(void)loadPhase5;
-(void)assignScenes;
-(void)assignMultiplayerScenes;
-(void)loadPhase6;
-(void)loadPhase7;
-(void)loadPhase8;
-(void)loadPhase9;
-(void)loadPhase10;
-(void)loadPhase11;
-(void)askForRatingAfterResume;
-(void)whatsNewPopUpTouch;
-(void)whatsNewPopUpDidDisappear;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)dealloc;
-(void)initStartScreen;
-(void)startStartScreenLoopTimer;
-(void)startScreenLoop;
-(void)checkAndDisplayNewsIfNeeded;
-(void)checkNewsIds;
-(void)initCalibrationScreen;
-(void)calibrationScreenLoop;
-(void)newsButtonTouched;
-(void)setButtonTouched;
-(void)doneButtonTouched;
-(void)showNewsAndLoadURL:(BOOL)url;
-(void)webViewDidFinishLoad:(id)webView;
-(void)markNewsAsDisplayed;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)hideNews;
-(void)newsDidAppear:(id)news finished:(id)finished context:(void*)context;
-(void)newsDidDissapear:(id)news finished:(id)finished context:(void*)context;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)applicationWillTerminate:(id)application;
-(void)playButtonTouched;
-(void)startAnimationFadeOutToBlackDidFinish:(id)startAnimationFadeOutToBlack finished:(id)finished context:(void*)context;
-(void)startAnimationFadeInToGameDidFinish:(id)startAnimationFadeInToGame finished:(id)finished context:(void*)context;
-(void)challengeButtonTouched;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)sendMailDidAppear;
-(void)sendMailDidDisappear;
-(void)cleanUpStartScreen;
-(void)returnFromChallenge;
-(void)scoresButtonTouched;
-(void)optionsButtonTouched;
-(void)returnFromOptionsWithScoreMarkersOption:(int)scoreMarkersOption scoreSubmissionsOption:(int)option soundsOption:(int)option3 shootingOption:(int)option4 calibrationOption:(int)option5 gameModeOption:(int)option6 openFeintOption:(int)option7;
-(void)initNewGame;
-(void)pauseTap;
-(void)restartGameAfterPause;
-(void)shootInDirection:(float)direction;
-(void)reportLocalyticsGameDidFinished;
-(void)gameDidFinish;
-(void)drawAnimationsOnGameOverScreen;
-(void)validationDidTimeout;
-(void)resetGame;
-(void)checkServerHighScoresIfNeeded;
-(void)showSubmitWWHSView;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(void)prepareScreenForSubmitWWHSView;
-(void)restartGame;
-(void)restartAnimationFadeOutToBlackDidFinish:(id)restartAnimationFadeOutToBlack finished:(id)finished context:(void*)context;
-(void)restartAnimationFadeInToGameDidFinish:(id)restartAnimationFadeInToGame finished:(id)finished context:(void*)context;
-(void)startMainGameLoopTimer;
-(void)stopMainGameLoopTimer;
-(void)showMenu;
-(void)mainGameLoop;
-(void)drawScreen;
-(void)drawUnderwaterBackgroundObjects;
-(void)createScoreElementsFromTileId:(int)tileId score:(int)score atPoint:(CGPoint)point;
-(void)createScoreElementsFromTileId:(int)tileId score:(int)score atPoint:(CGPoint)point alignment:(int)alignment;
-(void)swapBuffer;
-(void)checkForCollisions;
-(void)checkForPowerUpCollisionsOnly;
-(void)checkForCollectibleCollisionsOnly;
-(void)startExplodingPlatformSound;
-(void)moveScreenWithOffset:(float)offset;
-(void)removeObjectsBelowScreen;
-(void)removeObjectLater:(id)later;
-(void)addToObjectsToRemoveArray:(id)removeArray;
-(void)removeAllPlatformsBelowScreen;
-(int)generateSceneObjectAboveScreen;
-(void)generateRandomObjectAboveScreen;
-(void)addNewLocalScore;
-(void)replaceLocalScoreNameIfNeeded;
-(void)regenerateLocalScoreTextures;
-(void)prepareHSResultsForDrawingInGame;
-(void)checkAccelerometer;
-(void)accelerometer:(id)accelerometer didAccelerate:(id)accelerate;
-(void)requestWorldHighScores;
-(void)cancelGetHSConnectionIfNeeded;
-(void)cancelFriendsConnectionIfNeeded;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didReceiveData:(id)data;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connectionDidFinishLoading:(id)connection;
-(void)loadStats;
-(void)loadLocalScores;
-(void)loadFriendScores;
-(void)submitFriendsRequestToServer;
-(void)cancelLoadingFriends;
-(void)sendScoreButtonTouched;
-(void)submitScore;
-(void)submitHighScore;
-(void)submitScoreAndHighScore;
-(void)cancelSendButtonTouched;
-(void)facebookLoginButtonTouched:(id)touched;
-(void)dialog:(id)dialog didFailWithError:(id)error;
-(void)fbDidNotLogin:(BOOL)fb;
-(void)dialogDidNotComplete:(id)dialog;
-(void)dialogDidNotCompleteWithUrl:(id)dialog;
-(void)dialogCompleteWithUrl:(id)url;
-(void)loadFacebookFriends;
-(void)submitToFacebook;
-(void)fbDidLogin;
-(void)fbDidLogout;
-(void)request:(id)request didLoad:(id)load;
-(void)request:(id)request didFailWithError:(id)error;
-(void)submitToTwitter;
-(void)showTwittComposer;
-(void)removeTwitterView;
-(void)removeTwitterViewAndShowMatchmaker;
-(void)twitterDidFinish:(id)twitter finished:(id)finished context:(void*)context;
-(void)twitterDidSubmit;
-(id)md5HexDigest:(id)digest;
-(void)touchBeganAtPoint:(CGPoint)point;
-(void)touchMovedWithTouchPoint:(CGPoint)touchPoint previousTouchPoint:(CGPoint)point;
-(void)touchEndedAtPoint:(CGPoint)point;
-(void)cancelTouchPlatformIfNeeded;
-(void)generateSafeArea:(int)area;
-(void)showClassicPopUp;
-(void)fadeOutClassicPopUp;
-(void)classicPopUpDidFade:(id)classicPopUp finished:(id)finished context:(void*)context;
-(void)loadPlayerAndSceneryTexturesIfNeeded;
-(void)unloadSceneryTextures;
-(void)unloadPlayerTextures;
-(void)unloadOpponentTextures;
-(void)unloadExtraSounds;
-(void)loadShootingSoundType:(int)type;
-(void)loadMonsterExplosionSoundType:(int)type;
-(void)loadPropellerSoundType:(int)type;
-(void)loadMonsterHitSoundType:(int)type;
-(void)loadPlayerTexturesDoodle;
-(void)loadPlayerTexturesOoga;
-(void)loadPlayerTexturesGhost;
-(void)loadPlayerTexturesSnow;
-(void)loadPlayerTexturesJungle;
-(void)loadPlayerTexturesSpace;
-(void)loadPlayerTexturesBunny;
-(void)loadPlayerTexturesSoccer;
-(void)loadPlayerTexturesUnderwater;
-(void)loadPlayerTexturesMultiplayerRed;
-(void)loadPlayerTexturesMultiplayerBlue;
-(void)loadOpponentTexturesMultiplayerRed;
-(void)loadOpponentTexturesMultiplayerBlue;
-(void)loadPlayerTexturesDoodlestein;
-(void)loadPlayerTexturesHop;
-(void)loadPlayerTexturesIce;
-(void)updateGameStats;
-(void)resetGameStatsDict;
-(void)validateGameStatsDict;
-(void)resetStatsButtonTouched;
-(void)resetScoresButtonTouched;
-(void)stopRainSound;
-(void)playThunderSound;
-(void)shouldShakeRocket:(int)rocket;
-(void)authenticateLocalUser;
-(void)authenticateLocalUserAndShowError:(BOOL)error;
-(void)processGCAuth:(id)auth;
-(void)checkAndReportAchievementsIfNeeded;
-(void)checkAndReportProgressAchievementsIfNeeded;
-(void)syncServerAchievements;
-(void)syncServerAchievementsDidFinish:(id)syncServerAchievements error:(id)error;
-(void)processServerAchievements:(id)achievements;
-(void)syncGameNetworkAchievements:(id)achievements;
-(void)setAllAchievementFlagsToValue:(int)value;
-(void)mapAchievementDictsToFlags;
-(void)setAchievementFlagFromAchievementId:(id)achievementId;
-(void)mapOFAchievementsToFlags;
-(BOOL)earnedAchievementWithId:(id)anId nameTextureId:(int)anId2 progressAchievement:(BOOL)achievement;
-(void)updateMultiplayerWinAchievements;
-(void)checkTwitterAchievement;
-(void)checkFacebookAchievement;
-(void)reportScoreWithScoreAndCategoryNameArray:(id)scoreAndCategoryNameArray;
-(void)addScoreToUnsentHighScoresArray:(id)unsentHighScoresArray;
-(void)reportScore:(id)score;
-(void)resendFailedHighScores;
-(void)increaseAndReportMultiplayerScore;
-(void)callMethod:(SEL)method withArg:(id)arg error:(id)error;
-(void)callMethodOnMainThread:(SEL)thread withArg:(id)arg error:(id)error;
-(void)multiplayerButtonTouched;
-(void)showMatchmakerAnimated:(BOOL)animated;
-(void)matchmakerViewControllerWasCancelled:(id)cancelled;
-(void)matchmakerViewController:(id)controller didFailWithError:(id)error;
-(void)matchmakerViewController:(id)controller didFindMatch:(id)match;
-(void)removeMatchmakerFromView;
-(void)restartMatchmaker;
-(void)returnToMenuFromMatchmaker;
-(void)processGCInvite:(id)invite;
-(void)processGCPlayersToInvite:(id)invite;
-(void)resolveInvitation;
-(void)matchmakerDidAppear;
-(void)prepareMultiplayerGame;
-(void)initNewMultiplayerGame;
-(void)match:(id)match didReceiveData:(id)data fromPlayer:(id)player;
-(void)latePacketPlayer:(EventPacketPlayer*)player;
-(void)latePacketValidate;
-(void)checkOpponentState;
-(void)waitingForOpponentTick;
-(void)match:(id)match player:(id)player didChangeState:(int)state;
-(void)match:(id)match connectionWithPlayerFailed:(id)playerFailed withError:(id)error;
-(void)match:(id)match didFailWithError:(id)error;
-(void)connectMatch;
-(void)sendConnectPacket;
-(void)sendSeedPacket;
-(void)syncDidTimeout;
-(void)seedDidTimeout;
-(void)connectDidTimeout;
-(void)stateDidTimeout;
-(void)disconnectMatchWithReason:(int)reason skipAlert:(BOOL)alert;
-(void)disconnectMatch;
-(void)togglePlayAgainButton;
-(void)getTotalMultiplayerWins;
-(void)multiplayerWinsDidFinishLoadingWithScore:(id)multiplayerWins error:(id)error;
-(void)loadAndSyncLeaderboardEggsFromGCServer;
-(void)leaderboardEggsDidFinishLoadingFromGCServerWithCount:(int)leaderboardEggs;
-(int)getEggsFromLeaderboardEggsArray;
-(void)saveEggsToLeaderboardEggsArray:(int)leaderboardEggsArray;
-(void)syncEggsBetweenLeaderboardAndEggHunterExtraAchievement;
-(void)tryToSetUpCloudService;
-(void)searchForCloudDocumentFromPreviousInstall;
-(void)searchForCloudDocumentFromCurrentInstall;
-(void)searchForCloudDocumentsFromAllDevices;
-(void)queryDidFinishGathering:(id)query;
-(void)createNewCloudDocumentWithFileURL:(id)fileURL destinationURL:(id)url contentDictionary:(id)dictionary;
-(void)newCloudDocumentCreated:(id)created;
-(void)loadExistingCloudDocumentWithFileURL:(id)fileURL;
-(void)existingCloudDocumentLoaded:(id)loaded;
-(void)loadQueryCloudDocumentsWithQueryResults:(id)queryResults;
-(void)cloudDocumentDidClose:(id)cloudDocument;
-(void)deleteCloudDocumentFromCloudWithURL:(id)url;
-(id)generateCloudContentDict;
-(void)mergeCloudDocument:(id)document;
-(void)showDocumentSelector;
-(void)removeDocumentSelector;
-(void)documentSelectorDidSelectIndexId:(int)documentSelector;
-(void)matchmakerViewWillAppear:(id)matchmakerView;
-(void)matchmakerViewDidAppear:(id)matchmakerView;
-(void)matchmakerViewWillDisappear:(id)matchmakerView;
-(void)matchmakerViewDidDisppear:(id)matchmakerView;
-(void)modalViewDidAppear:(id)modalView;
-(void)modalViewDidDisappear:(id)modalView;
-(void)enableOpenFeint:(BOOL)feint;
-(void)loadAndSyncLeaderboardEggsFromOFServer;
-(void)openFeintUserDidLogin:(id)openFeintUser;
-(void)requestDidComplete:(id)request userData:(id)data error:(id)error;
@end

