/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "OFHighScoreService.h"
#import "DoodleJump-Structs.h"
#import "OFService.h"

@class NSMutableArray;

@interface OFHighScoreService : OFService {
	NSMutableArray* mPendingBlobs;
	vector<OFPointer<OFHighScoreBatchEntry>,std::allocator<OFPointer<OFHighScoreBatchEntry> > > mPendingScores;
}
+(id)sharedInstance;
+(void)initializeService;
+(void)shutdownService;
+(id)getPage:(int)page forLeaderboard:(id)leaderboard friendsOnly:(BOOL)only onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(id)getPage:(int)page forLeaderboard:(id)leaderboard friendsOnly:(BOOL)only silently:(BOOL)silently onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(id)getPage:(int)page forLeaderboard:(id)leaderboard comparedToUserId:(id)userId friendsOnly:(BOOL)only silently:(BOOL)silently onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(id)getPage:(int)page forLeaderboard:(id)leaderboard comparedToUserId:(id)userId friendsOnly:(BOOL)only silently:(BOOL)silently timeScope:(unsigned)scope onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(id)getPage:(int)page pageSize:(int)size forLeaderboard:(id)leaderboard comparedToUserId:(id)userId friendsOnly:(BOOL)only silently:(BOOL)silently timeScope:(unsigned)scope onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(void)getLocalHighScores:(id)scores onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(id)getPageWithLoggedInUserWithPageSize:(int)pageSize forLeaderboard:(id)leaderboard silently:(BOOL)silently onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(id)getPageWithLoggedInUserWithPageSize:(int)pageSize forLeaderboard:(id)leaderboard onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(id)getPageWithLoggedInUserForLeaderboard:(id)leaderboard onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(id)getHighScoreNearCurrentUserForLeaderboard:(id)leaderboard andBetterCount:(unsigned)count andWorseCount:(unsigned)count3 onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(void)setHighScore:(long long)score forLeaderboard:(id)leaderboard onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(void)setHighScore:(long long)score forLeaderboard:(id)leaderboard silently:(BOOL)silently onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(void)setHighScore:(long long)score withDisplayText:(id)displayText forLeaderboard:(id)leaderboard onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(void)setHighScore:(long long)score withDisplayText:(id)displayText forLeaderboard:(id)leaderboard silently:(BOOL)silently onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(void)setHighScore:(long long)score withDisplayText:(id)displayText withCustomData:(id)customData forLeaderboard:(id)leaderboard silently:(BOOL)silently onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(void)setHighScore:(long long)score withDisplayText:(id)displayText withCustomData:(id)customData forLeaderboard:(id)leaderboard silently:(BOOL)silently deferred:(BOOL)deferred onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(void)setHighScore:(long long)score withDisplayText:(id)displayText withCustomData:(id)customData withBlob:(id)blob forLeaderboard:(id)leaderboard silently:(BOOL)silently deferred:(BOOL)deferred onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(id)batchSetHighScores:(vector<OFPointer<OFHighScoreBatchEntry>,std::allocator<OFPointer<OFHighScoreBatchEntry> > >*)scores onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure optionalMessage:(id)message;
+(id)batchSetHighScores:(vector<OFPointer<OFHighScoreBatchEntry>,std::allocator<OFPointer<OFHighScoreBatchEntry> > >*)scores silently:(BOOL)silently onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure optionalMessage:(id)message;
+(id)batchSetHighScores:(vector<OFPointer<OFHighScoreBatchEntry>,std::allocator<OFPointer<OFHighScoreBatchEntry> > >*)scores silently:(BOOL)silently onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure optionalMessage:(id)message fromSynch:(BOOL)synch;
+(id)submitHighScoreBatch:(vector<OFPointer<OFHighScoreBatchEntry>,std::allocator<OFPointer<OFHighScoreBatchEntry> > >*)batch silently:(BOOL)silently onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure optionalMessage:(id)message;
+(void)getAllHighScoresForLoggedInUser:(const OFDelegate*)user onFailure:(const OFDelegate*)failure optionalMessage:(id)message;
+(void)getHighScoresFromLocation:(id)location radius:(int)radius pageIndex:(int)index forLeaderboard:(id)leaderboard onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(void)getHighScoresFromLocation:(id)location radius:(int)radius pageIndex:(int)index forLeaderboard:(id)leaderboard userMapMode:(id)mode onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(id)getDistributedHighScoresAtPage:(int)page pageSize:(int)size scoreDelta:(int)delta startScore:(int)score forLeaderboard:(id)leaderboard onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(id)downloadBlobForHighScore:(id)highScore onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
-(void)populateKnownResources:(OFResourceNameMap*)resources;
-(void)_uploadBlobs:(id)blobs;
-(void)_onSetHighScore:(id)score nextCall:(id)call;
-(void)dispatchPendingScores;
-(void)onBlobDownloaded:(id)downloaded nextCall:(id)call;
-(void)onBlobFailedDownloading:(id)downloading nextCall:(id)call;
-(id).cxx_construct;
-(void).cxx_destruct;
@end

@interface OFHighScoreService (Private)
+(void)setupOfflineSupport:(bool)support;
+(bool)localSetHighScore:(long long)score forLeaderboard:(id)leaderboard forUser:(id)user;
+(bool)localSetHighScore:(long long)score forLeaderboard:(id)leaderboard forUser:(id)user displayText:(id)text serverDate:(id)date addToExisting:(BOOL)existing;
+(bool)localSetHighScore:(long long)score forLeaderboard:(id)leaderboard forUser:(id)user displayText:(id)text customData:(id)data serverDate:(id)date addToExisting:(BOOL)existing;
+(bool)localSetHighScore:(long long)score forLeaderboard:(id)leaderboard forUser:(id)user displayText:(id)text customData:(id)data serverDate:(id)date addToExisting:(BOOL)existing shouldSubmit:(BOOL*)submit;
+(bool)localSetHighScore:(long long)score forLeaderboard:(id)leaderboard forUser:(id)user displayText:(id)text customData:(id)data blob:(id)blob serverDate:(id)date addToExisting:(BOOL)existing shouldSubmit:(BOOL*)submit overrideExisting:(BOOL)existing10;
+(bool)synchHighScore:(id)score;
+(id)sendPendingHighScores:(id)scores silently:(BOOL)silently onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(BOOL)getPreviousHighScoreLocal:(long long*)local forLeaderboard:(id)leaderboard;
+(void)getHighScoresLocal:(id)local onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
+(id)getHighScoresLocal:(id)local;
+(id)getHighScoreForUser:(id)user leaderboardId:(id)anId descendingSortOrder:(bool)order;
+(void)uploadBlob:(id)blob forHighScore:(id)highScore;
+(OFSqlQuery*)buildGetHighScoresQuery:(bool)query limit:(int)limit;
+(void)buildScoreToKeepQuery:(bool)keepQuery;
+(void)buildDeleteScoresQuery:(bool)query;
+(void)buildSetHighScoreQuery:(bool)query;
+(id)getPendingBlobForLeaderboard:(id)leaderboard andScore:(long long)score;
+(void)setPendingBlob:(id)blob forLeaderboard:(id)leaderboard andScore:(long long)score;
+(void)removePendingBlobForLeaderboard:(id)leaderboard;
+(void)reportMissingBlobForHighScore:(id)highScore;
+(id)submitHighScoreBatch:(vector<OFPointer<OFHighScoreBatchEntry>,std::allocator<OFPointer<OFHighScoreBatchEntry> > >)batch withGameCenterDates:(id)gameCenterDates message:(id)message silently:(BOOL)silently onSuccess:(const OFDelegate*)success onFailure:(const OFDelegate*)failure;
-(id)init;
-(void)dealloc;
-(void)onBlobUploaded:(id)uploaded;
-(void)onBlobUploadFailed;
-(id)_getPendingBlobForLeaderboard:(id)leaderboard andScore:(long long)score;
-(void)_setPendingBlob:(id)blob forLeaderboard:(id)leaderboard andScore:(long long)score;
-(void)_removePendingBlobForLeaderboard:(id)leaderboard;
@end

