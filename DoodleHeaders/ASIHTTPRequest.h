/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "DoodleJump-Structs.h"
#import "NSCopying.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSDate, NSNumber, NSTimer, NSMutableArray, NSMutableData, NSData, NSRecursiveLock, NSError, NSDictionary, NSURL, NSString, NSMutableDictionary, NSOutputStream, NSArray, NSInputStream;
@protocol ASIProgressDelegate, ASIHTTPRequestDelegate;

@interface ASIHTTPRequest : XXUnknownSuperclass <NSCopying> {
	NSURL* url;
	NSURL* originalURL;
	id<ASIHTTPRequestDelegate> delegate;
	id<ASIProgressDelegate, ASIHTTPRequestDelegate> queue;
	NSString* requestMethod;
	NSMutableData* postBody;
	NSData* compressedPostBody;
	BOOL shouldStreamPostDataFromDisk;
	NSString* postBodyFilePath;
	NSString* compressedPostBodyFilePath;
	BOOL didCreateTemporaryPostDataFile;
	NSOutputStream* postBodyWriteStream;
	NSInputStream* postBodyReadStream;
	NSMutableDictionary* requestHeaders;
	BOOL haveBuiltRequestHeaders;
	NSDictionary* responseHeaders;
	NSMutableArray* requestCookies;
	NSArray* responseCookies;
	BOOL useCookiePersistence;
	BOOL useKeychainPersistence;
	BOOL useSessionPersistence;
	BOOL allowCompressedResponse;
	BOOL shouldCompressRequestBody;
	NSString* downloadDestinationPath;
	NSString* temporaryFileDownloadPath;
	NSOutputStream* fileDownloadOutputStream;
	BOOL complete;
	NSError* error;
	NSString* username;
	NSString* password;
	NSString* domain;
	NSString* proxyUsername;
	NSString* proxyPassword;
	NSString* proxyDomain;
	id<ASIProgressDelegate> uploadProgressDelegate;
	id<ASIProgressDelegate> downloadProgressDelegate;
	BOOL haveExaminedHeaders;
	NSMutableData* rawResponseData;
	CFHTTPMessageRef request;
	NSInputStream* readStream;
	CFHTTPAuthenticationRef requestAuthentication;
	NSMutableDictionary* requestCredentials;
	int authenticationRetryCount;
	NSString* authenticationScheme;
	NSString* authenticationRealm;
	BOOL shouldPresentAuthenticationDialog;
	BOOL shouldPresentProxyAuthenticationDialog;
	CFHTTPAuthenticationRef proxyAuthentication;
	NSMutableDictionary* proxyCredentials;
	int proxyAuthenticationRetryCount;
	NSString* proxyAuthenticationScheme;
	NSString* proxyAuthenticationRealm;
	int responseStatusCode;
	NSString* responseStatusMessage;
	unsigned long long contentLength;
	unsigned long long partialDownloadSize;
	unsigned long long postLength;
	unsigned long long totalBytesRead;
	unsigned long long totalBytesSent;
	unsigned long long lastBytesRead;
	unsigned long long lastBytesSent;
	NSRecursiveLock* cancelledLock;
	SEL didStartSelector;
	SEL didReceiveResponseHeadersSelector;
	SEL didFinishSelector;
	SEL didFailSelector;
	SEL didReceiveDataSelector;
	NSDate* lastActivityTime;
	double timeOutSeconds;
	BOOL shouldResetUploadProgress;
	BOOL shouldResetDownloadProgress;
	ASIHTTPRequest* mainRequest;
	BOOL showAccurateProgress;
	BOOL updatedProgress;
	BOOL haveBuiltPostBody;
	unsigned long long uploadBufferSize;
	unsigned defaultResponseEncoding;
	unsigned responseEncoding;
	BOOL allowResumeForFileDownloads;
	NSDictionary* userInfo;
	BOOL useHTTPVersionOne;
	BOOL shouldRedirect;
	BOOL needsRedirect;
	int redirectCount;
	BOOL validatesSecureCertificate;
	NSString* proxyHost;
	int proxyPort;
	NSURL* PACurl;
	int authenticationNeeded;
	BOOL shouldPresentCredentialsBeforeChallenge;
	BOOL isSynchronous;
	BOOL inProgress;
	BOOL readStreamIsScheduled;
	int numberOfTimesToRetryOnTimeout;
	int retryCount;
	BOOL shouldAttemptPersistentConnection;
	double persistentConnectionTimeoutSeconds;
	BOOL connectionCanBeReused;
	NSMutableDictionary* connectionInfo;
	NSTimer* statusTimer;
	BOOL shouldUseRFC2616RedirectBehaviour;
	BOOL downloadComplete;
	NSNumber* requestID;
	NSString* runLoopMode;
}
@property(retain) NSString* username;
@property(retain) NSString* password;
@property(retain) NSString* domain;
@property(retain) NSString* proxyUsername;
@property(retain) NSString* proxyPassword;
@property(retain) NSString* proxyDomain;
@property(retain, setter=setURL:) NSURL* url;
@property(retain) NSURL* originalURL;
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) id queue;
@property(assign, nonatomic) id uploadProgressDelegate;
@property(assign, nonatomic) id downloadProgressDelegate;
@property(assign) BOOL useKeychainPersistence;
@property(assign) BOOL useSessionPersistence;
@property(assign) BOOL useCookiePersistence;
@property(retain) NSString* downloadDestinationPath;
@property(retain) NSString* temporaryFileDownloadPath;
@property(assign) SEL didStartSelector;
@property(assign) SEL didReceiveResponseHeadersSelector;
@property(assign) SEL didFinishSelector;
@property(assign) SEL didFailSelector;
@property(assign) SEL didReceiveDataSelector;
@property(retain) NSString* authenticationRealm;
@property(retain) NSString* proxyAuthenticationRealm;
@property(retain) NSError* error;
@property(assign) BOOL complete;
@property(retain) NSMutableDictionary* requestHeaders;
@property(retain) NSDictionary* responseHeaders;
@property(retain) NSArray* responseCookies;
@property(retain) NSMutableArray* requestCookies;
@property(retain) NSDictionary* requestCredentials;
@property(assign) int responseStatusCode;
@property(retain) NSMutableData* rawResponseData;
@property(retain, nonatomic) NSDate* lastActivityTime;
@property(assign) double timeOutSeconds;
@property(retain) NSString* requestMethod;
@property(retain) NSMutableData* postBody;
@property(retain, nonatomic) NSData* compressedPostBody;
@property(assign) unsigned long long contentLength;
@property(assign) unsigned long long partialDownloadSize;
@property(assign) unsigned long long postLength;
@property(assign) BOOL shouldResetDownloadProgress;
@property(assign) BOOL shouldResetUploadProgress;
@property(assign) ASIHTTPRequest* mainRequest;
@property(assign) unsigned long long totalBytesRead;
@property(assign) unsigned long long totalBytesSent;
@property(assign) BOOL showAccurateProgress;
@property(assign, nonatomic) unsigned long long uploadBufferSize;
@property(assign) unsigned defaultResponseEncoding;
@property(assign) unsigned responseEncoding;
@property(assign) BOOL allowCompressedResponse;
@property(assign) BOOL allowResumeForFileDownloads;
@property(retain) NSDictionary* userInfo;
@property(retain) NSString* postBodyFilePath;
@property(retain, nonatomic) NSString* compressedPostBodyFilePath;
@property(retain, nonatomic) NSOutputStream* postBodyWriteStream;
@property(retain, nonatomic) NSInputStream* postBodyReadStream;
@property(assign) BOOL shouldStreamPostDataFromDisk;
@property(assign) BOOL didCreateTemporaryPostDataFile;
@property(assign) BOOL useHTTPVersionOne;
@property(assign, nonatomic) unsigned long long lastBytesRead;
@property(assign, nonatomic) unsigned long long lastBytesSent;
@property(retain) NSRecursiveLock* cancelledLock;
@property(assign, nonatomic) BOOL haveBuiltPostBody;
@property(retain, nonatomic) NSOutputStream* fileDownloadOutputStream;
@property(assign) int authenticationRetryCount;
@property(assign) int proxyAuthenticationRetryCount;
@property(assign, nonatomic) BOOL updatedProgress;
@property(assign) BOOL shouldRedirect;
@property(assign) BOOL validatesSecureCertificate;
@property(assign, nonatomic) BOOL needsRedirect;
@property(assign, nonatomic) int redirectCount;
@property(assign) BOOL shouldCompressRequestBody;
@property(retain) NSDictionary* proxyCredentials;
@property(retain) NSString* proxyHost;
@property(assign) int proxyPort;
@property(retain) NSURL* PACurl;
@property(retain) NSString* authenticationScheme;
@property(retain) NSString* proxyAuthenticationScheme;
@property(assign) BOOL shouldPresentAuthenticationDialog;
@property(assign) BOOL shouldPresentProxyAuthenticationDialog;
@property(assign) int authenticationNeeded;
@property(retain) NSString* responseStatusMessage;
@property(assign) BOOL shouldPresentCredentialsBeforeChallenge;
@property(assign) BOOL haveBuiltRequestHeaders;
@property(assign) BOOL isSynchronous;
@property(assign) BOOL inProgress;
@property(assign) int numberOfTimesToRetryOnTimeout;
@property(assign) int retryCount;
@property(assign) BOOL shouldAttemptPersistentConnection;
@property(assign) double persistentConnectionTimeoutSeconds;
@property(assign) BOOL connectionCanBeReused;
@property(retain, nonatomic) NSMutableDictionary* connectionInfo;
@property(retain, nonatomic) NSInputStream* readStream;
@property(assign, nonatomic) BOOL readStreamIsScheduled;
@property(retain, nonatomic) NSTimer* statusTimer;
@property(assign) BOOL shouldUseRFC2616RedirectBehaviour;
@property(assign, nonatomic) BOOL downloadComplete;
@property(retain) NSNumber* requestID;
@property(assign, nonatomic) NSString* runLoopMode;
+(void)initialize;
+(id)requestWithURL:(id)url;
+(void)performSelector:(SEL)selector onTarget:(id)target withObject:(id)object amount:(void*)amount;
+(void)updateProgressIndicator:(id)indicator withProgress:(unsigned long long)progress ofTotal:(unsigned long long)total;
+(void)expirePersistentConnections;
+(double)defaultTimeOutSeconds;
+(void)setDefaultTimeOutSeconds:(double)seconds;
+(id)sessionProxyCredentialsStore;
+(id)sessionCredentialsStore;
+(void)storeProxyAuthenticationCredentialsInSessionStore:(id)sessionStore;
+(void)storeAuthenticationCredentialsInSessionStore:(id)sessionStore;
+(void)removeProxyAuthenticationCredentialsFromSessionStore:(id)sessionStore;
+(void)removeAuthenticationCredentialsFromSessionStore:(id)sessionStore;
+(void)saveCredentials:(id)credentials forHost:(id)host port:(int)port protocol:(id)protocol realm:(id)realm;
+(void)saveCredentials:(id)credentials forProxy:(id)proxy port:(int)port realm:(id)realm;
+(id)savedCredentialsForHost:(id)host port:(int)port protocol:(id)protocol realm:(id)realm;
+(id)savedCredentialsForProxy:(id)proxy port:(int)port protocol:(id)protocol realm:(id)realm;
+(void)removeCredentialsForHost:(id)host port:(int)port protocol:(id)protocol realm:(id)realm;
+(void)removeCredentialsForProxy:(id)proxy port:(int)port realm:(id)realm;
+(id)sessionCookies;
+(void)setSessionCookies:(id)cookies;
+(void)addSessionCookie:(id)cookie;
+(void)clearSession;
+(id)uncompressZippedData:(id)data;
+(int)uncompressZippedDataFromFile:(id)file toFile:(id)file2;
+(int)uncompressZippedDataFromSource:(FILE*)source toDestination:(FILE*)destination;
+(id)compressData:(id)data;
+(int)compressDataFromFile:(id)file toFile:(id)file2;
+(int)compressDataFromSource:(FILE*)source toDestination:(FILE*)destination;
+(id)defaultUserAgentString;
+(id)proxiesForURL:(id)url fromPAC:(id)pac;
+(id)mimeTypeForFileAtPath:(id)path;
+(BOOL)isBandwidthThrottled;
+(unsigned long)maxBandwidthPerSecond;
+(void)setMaxBandwidthPerSecond:(unsigned long)second;
+(void)incrementBandwidthUsedInLastSecond:(unsigned long)lastSecond;
+(void)recordBandwidthUsage;
+(unsigned long)averageBandwidthUsedPerSecond;
+(void)measureBandwidthUsage;
+(unsigned long)maxUploadReadLength;
+(void)setShouldThrottleBandwidthForWWAN:(BOOL)throttleBandwidthForWWAN;
+(void)throttleBandwidthForWWANUsingLimit:(unsigned long)wwanusingLimit;
+(void)registerForNetworkReachabilityNotifications;
+(void)unsubscribeFromNetworkReachabilityNotifications;
+(BOOL)isNetworkReachableViaWWAN;
+(void)reachabilityChanged:(id)changed;
+(BOOL)isiPhoneOS2;
+(id)base64forData:(id)data;
-(id)initWithURL:(id)url;
-(void)dealloc;
-(void)addRequestHeader:(id)header value:(id)value;
-(void)buildPostBody;
-(void)setupPostBody;
-(void)appendPostData:(id)data;
-(void)appendPostDataFromFile:(id)file;
-(void)cancel;
-(id)responseString;
-(BOOL)isResponseCompressed;
-(id)responseData;
-(void)startSynchronous;
-(void)start;
-(void)startAsynchronous;
-(BOOL)isConcurrent;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(void)main;
-(void)applyAuthorizationHeader;
-(void)applyCookieHeader;
-(void)buildRequestHeaders;
-(void)startRequest;
-(void)performRedirect;
-(void)updateStatus:(id)status;
-(BOOL)shouldTimeOut;
-(void)checkRequestStatus;
-(void)cancelLoad;
-(void)removeTemporaryDownloadFile;
-(void)removePostDataFile;
-(id)HEADRequest;
-(void)updateProgressIndicators;
-(void)updateDownloadProgress;
-(void)updateUploadProgress;
-(void)incrementDownloadSizeBy:(long long)by;
-(void)incrementUploadSizeBy:(long long)by;
-(void)removeUploadProgressSoFar;
-(void)requestReceivedResponseHeaders;
-(void)requestStarted;
-(void)requestFinished;
-(void)failWithError:(id)error;
-(void)readResponseHeaders;
-(void)saveProxyCredentialsToKeychain:(id)keychain;
-(void)saveCredentialsToKeychain:(id)keychain;
-(BOOL)applyProxyCredentials:(id)credentials;
-(BOOL)applyCredentials:(id)credentials;
-(id)findProxyCredentials;
-(id)findCredentials;
-(void)retryUsingSuppliedCredentials;
-(void)cancelAuthentication;
-(BOOL)showProxyAuthenticationDialog;
-(BOOL)askDelegateForProxyCredentials;
-(void)attemptToApplyProxyCredentialsAndResume;
-(BOOL)showAuthenticationDialog;
-(BOOL)askDelegateForCredentials;
-(void)attemptToApplyCredentialsAndResume;
-(void)addBasicAuthenticationHeaderWithUsername:(id)username andPassword:(id)password;
-(void)handleNetworkEvent:(unsigned long)event;
-(void)handleBytesAvailable;
-(void)handleStreamComplete;
-(void)markAsFinished;
-(BOOL)retryUsingNewConnection;
-(void)handleStreamError;
-(void)destroyReadStream;
-(void)scheduleReadStream;
-(void)unscheduleReadStream;
-(id)connectionID;
-(id)copyWithZone:(NSZone*)zone;
-(id)findSessionProxyAuthenticationCredentials;
-(id)findSessionAuthenticationCredentials;
-(void)performThrottling;
@end

