/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "MPOAuthAPI.h"
#import "DoodleJump-Structs.h"
#import "OFCallbackable.h"
#import "MPOAuthAPIInternalClient.h"

@class NSURL, MPOAuthCredentialConcreteStore, NSTimer, NSMutableArray, NSObject;
@protocol MPOAuthAPIDelegate, MPOAuthParameterFactory, MPOAuthCredentialStore;

@interface MPOAuthAPI : XXUnknownSuperclass <MPOAuthAPIInternalClient, OFCallbackable> {
	MPOAuthCredentialConcreteStore* _credentials;
	NSURL* _baseURL;
	NSURL* _authenticationURL;
	NSURL* _oauthRequestTokenURL;
	NSURL* _oauthAuthorizeTokenURL;
	NSURL* _oauthGetAccessTokenURL;
	int _signatureScheme;
	NSMutableArray* _activeLoaders;
	id<MPOAuthAPIDelegate> _delegate;
	NSTimer* _refreshTimer;
}
@property(retain, nonatomic) NSObject<MPOAuthParameterFactory, MPOAuthCredentialStore>* credentials;
@property(retain, nonatomic) NSURL* baseURL;
@property(retain, nonatomic) NSURL* authenticationURL;
@property(retain, nonatomic) NSURL* oauthRequestTokenURL;
@property(retain, nonatomic) NSURL* oauthAuthorizeTokenURL;
@property(retain, nonatomic) NSURL* oauthGetAccessTokenURL;
@property(assign, nonatomic) int signatureScheme;
@property(retain, nonatomic) NSMutableArray* activeLoaders;
@property(assign, nonatomic) id<MPOAuthAPIDelegate> delegate;
@property(retain, nonatomic) NSTimer* refreshTimer;
-(id)initWithCredentials:(id)credentials andBaseURL:(id)url;
-(id)initWithCredentials:(id)credentials authenticationURL:(id)url andBaseURL:(id)url3;
-(oneway void)dealloc;
-(BOOL)shouldAccessTokenBeRefreshed;
-(bool)isAuthenticated;
-(id)createLoaderForAccessToken;
-(id)createLoaderForRequestToken;
-(id)getRequestToken;
-(id)getAccessToken;
-(void)_authenticationRequestForRequestTokenSuccessfulLoad:(id)requestTokenSuccessfulLoad;
-(void)_authenticationRequestForUserPermissionsConfirmationAtURL:(id)url;
-(void)performMethod:(id)method withSuccess:(const OFDelegate*)success withFailure:(const OFDelegate*)failure;
-(void)performMethod:(id)method atURL:(id)url withParameters:(id)parameters withSuccess:(const OFDelegate*)success withFailure:(const OFDelegate*)failure;
-(id)createLoaderForMethod:(id)method atURL:(id)url withParameters:(id)parameters withHttpMethod:(id)httpMethod withSuccess:(const OFDelegate*)success withFailure:(const OFDelegate*)failure;
-(void)performMethod:(id)method atURL:(id)url withParameters:(id)parameters withHttpMethod:(id)httpMethod withSuccess:(const OFDelegate*)success withFailure:(const OFDelegate*)failure;
-(id)dataForMethod:(id)method;
-(id)dataForMethod:(id)method withParameters:(id)parameters;
-(id)dataForURL:(id)url andMethod:(id)method withParameters:(id)parameters;
-(void)_performedLoad:(id)load receivingData:(id)data;
-(void)removeAllCredentials;
-(void)_requestTokenReceived:(id)received;
-(void)_accessTokenReceived:(id)received;
-(void)_automaticallyRefreshAccessToken:(id)token;
-(bool)canReceiveCallbacksNow;
-(void)setAccessToken:(id)token andSecret:(id)secret;
-(void)_invalidateLocalCredentialsIfConsumerKeyHasChanged:(id)changed;
@end

@interface MPOAuthAPI (KeychainAdditions)
-(id)_getKeychainFindQuery:(id)query;
-(void)addToKeychainUsingName:(id)keychainUsingName andValue:(id)value;
-(id)findValueFromKeychainUsingName:(id)keychainUsingName;
-(void)removeValueFromKeychainUsingName:(id)keychainUsingName;
@end

